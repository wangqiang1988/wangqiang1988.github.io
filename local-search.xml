<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络工程师排错笔记-长更</title>
    <link href="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/"/>
    <url>/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="linux使用iptables做dnat-记录于20230901"><a href="#linux使用iptables做dnat-记录于20230901" class="headerlink" title="linux使用iptables做dnat-记录于20230901"></a>linux使用iptables做dnat-记录于20230901</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需要把每个vlan配置一个ip，只要用户访问到这个ip就转发到另一个ip<br>拓扑：<br>client1—-linux-ip1—-server<br>client2—-linux-ip2—-server<br>client3—-linux-ip3—-server</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先确定使用iptables来实现功能，那么需要服务器配置多个ip，那么有两种方式，一个是多网卡，另一个是vlan，多网卡的话如果网段过多无法实现，所以使用vlan的方式实现</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置8021q"><a href="#配置8021q" class="headerlink" title="配置8021q"></a>配置8021q</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install vlan<br>sudo modprobe 8021q<br></code></pre></td></tr></table></figure><h2 id="配置端口ip"><a href="#配置端口ip" class="headerlink" title="配置端口ip"></a>配置端口ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto eth0.4 #vlan4<br>auto eth0.200 #vlan200<br>auto eth0.2 #vlan2<br>iface eth0.4 inet static #配置vlan4 ip<br>    address 192.168.212.176<br>    netmask 255.255.255.0<br>    gateway 192.168.212.1<br>iface eth0.4 inet static #配置vlan4 子ip<br>    address 192.168.212.12<br>    netmask 255.255.255.0<br>iface eth0.200 inet static #配置vlan200 ip<br>    address 10.2.0.9<br>    netmask 255.255.240.0<br>iface eth0.2 inet static #配置vlan2 ip<br>    address 192.168.20.12<br>    netmask 255.255.255.0<br></code></pre></td></tr></table></figure><p>vlan4作为主管理ip，所以使用子ip作为dnat的地址，不然会无法访问服务器</p><h2 id="配置ipv4转发及iptables并记录日志"><a href="#配置ipv4转发及iptables并记录日志" class="headerlink" title="配置ipv4转发及iptables并记录日志"></a>配置ipv4转发及iptables并记录日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">记录iptables日志</span><br>sudo vim /etc/rsyslog.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加下面iptables.log</span><br>:msg, contains, &quot;iptables:&quot; -/var/log/iptables.log<br>&amp; ~<br>sudo vim /etc/sysctl.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改下面转发值为1</span><br>net.ipv4.ip_forward=1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加iptables，并将日志记录到iptables.log，持久化iptables可以写道rc.local</span><br>sudo iptables -t nat -A POSTROUTING -o eth0.4 -j LOG --log-prefix &quot;iptables: &quot; --log-level 7<br>sudo iptables -t nat -A POSTROUTING -o eth0.4 -j MASQUERADE<br><br>sudo iptables -t nat -A POSTROUTING -o eth0.4 -j LOG --log-prefix &quot;iptables: &quot; --log-level 7<br>sudo iptables -t nat -A POSTROUTING -o eth0.4 -j MASQUERADE<br><br>sudo iptables -t nat -A PREROUTING -d 192.168.212.12 -j LOG --log-prefix &quot;iptables: &quot; --log-level 7<br>sudo iptables -t nat -A PREROUTING -d 192.168.212.12 -j DNAT --to-destination 192.168.5.12<br><br>sudo iptables -t nat -A PREROUTING -d 192.168.20.12 -j LOG --log-prefix &quot;iptables: &quot; --log-level 7<br>sudo iptables -t nat -A PREROUTING -d 192.168.20.12 -j DNAT --to-destination 192.168.5.12<br><br>sudo iptables -t nat -A PREROUTING -d 10.2.0.9 -j LOG --log-prefix &quot;iptables: &quot; --log-level 7<br>sudo iptables -t nat -A PREROUTING -d 10.2.0.9 -j DNAT --to-destination 192.168.5.12<br></code></pre></td></tr></table></figure><p>看到如下说明基本ok了</p><h1 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h1><p>可以看到访问其中一个ip的地址已经被转到了目标server</p><p>client1—-linux-ip1—-server<br>192.168.5.98—-192.168.212.12—-192.168.5.12</p><h1 id="windows-radius服务器拿计费日志到es-记录于20230825"><a href="#windows-radius服务器拿计费日志到es-记录于20230825" class="headerlink" title="windows radius服务器拿计费日志到es-记录于20230825"></a>windows radius服务器拿计费日志到es-记录于20230825</h1><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><p>需要获取统一认证服务器的计费信息，对应用户名ip关系</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>windows nps服务器可以作为计费服务器使用，将计费日志使用filebeats收集到es，再从es用python拿出来即可做到实时搜索通过radius认证的用户名&amp;ip</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/userip.png" class=""><h1 id="h3c-v5对接windows-nps做802-1x接入认证使用ssh登录-记录于20230816"><a href="#h3c-v5对接windows-nps做802-1x接入认证使用ssh登录-记录于20230816" class="headerlink" title="h3c v5对接windows nps做802.1x接入认证使用ssh登录-记录于20230816"></a>h3c v5对接windows nps做802.1x接入认证使用ssh登录-记录于20230816</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>之前使用telnet登录，一切正常，修改成ssh后无法登录</p><h2 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h2><p>h3c v5配置跟其他radius client设备有一点不一样的是授权,这个是使用telnet时已经配置好的，当时也费了半天查找，如下：</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/h3c_v5_radius1.png" class=""><p>后来因为需要改ssh登录，就想着把login-service改成ssh，但是默认是没有的，需要先修改一下nps的xml文件</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/h3c_v5_radius3.png" class=""><p>修改完成后重启电脑即可，之前telnet时选择的是telnet，ssh修改完xml后重启才能用</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/h3c_v5_radius2.png" class=""><p>也就是说，radius rfc 2865里面标准的值是没有ssh的，需要自己手动修改，如果以后有其他设备限制登陆也应该可以用这种办法</p><h1 id="h3c-policy-based-route-记录于20230815"><a href="#h3c-policy-based-route-记录于20230815" class="headerlink" title="h3c policy-based-route-记录于20230815"></a>h3c policy-based-route-记录于20230815</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用H3c交换机在interface vlan接口做了一个policy-based-route，在一个acl里面的前面写了deny souce和destination，然后在policy-based-route调用后发现不管用</p><h2 id="排查方法-1"><a href="#排查方法-1" class="headerlink" title="排查方法"></a>排查方法</h2><p>因为policy-based-route能写node num，那么在前面写一个没有apply的行为是否可以呢，答案是可以<br>policy-based-route如下：</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/route_policy.png" class=""><p>acl如下：</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/acl.png" class=""><h1 id="openwrt使用pptp-vpn连接到阿里云进行出网-记录于20230815"><a href="#openwrt使用pptp-vpn连接到阿里云进行出网-记录于20230815" class="headerlink" title="openwrt使用pptp vpn连接到阿里云进行出网-记录于20230815"></a>openwrt使用pptp vpn连接到阿里云进行出网-记录于20230815</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>openwrt使用pptp连接到阿里云ecs进行上网，但是会出现连接被reset</p><h2 id="排查方法-2"><a href="#排查方法-2" class="headerlink" title="排查方法"></a>排查方法</h2><p>一开始以为iptables转发问题，后来从ecs抓包发现包已经转发出去了，然后就看了包的内容，发现包是这样的</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/rst_1.png" class=""><p>翻译过来是tcp 上一个段未捕获（常见于捕获开始时）<br>为什么是未捕获，包哪去了？也没有丢包啊，网络状态很好，那包哪去了，是不是mtu的问题，后来想到确实pptp需要改mtu，所以把openwrt的mtu改成了1440，然后问题解决</p><h2 id="mtu分析"><a href="#mtu分析" class="headerlink" title="mtu分析"></a>mtu分析</h2><p>待。。。</p><h1 id="域账号到期，导致windows-nps无法认证通过-记录于20230810"><a href="#域账号到期，导致windows-nps无法认证通过-记录于20230810" class="headerlink" title="域账号到期，导致windows nps无法认证通过-记录于20230810"></a>域账号到期，导致windows nps无法认证通过-记录于20230810</h1><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><p>用户反馈无法连接无线网络，无线认证用的802.1x结核windows nps，使用域账户进行认证</p><h2 id="排查方法-3"><a href="#排查方法-3" class="headerlink" title="排查方法"></a>排查方法</h2><p>1.通过wireshark抓包，只能看到wireshark有request和nps回复的reject，安全日志没有体现日志，是否有其他位置体现日志暂未发现。<br>2.更改账号有效期</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/radius_account_expair.png" class=""><h1 id="avaya板卡arp表地址不更新-记录于20230810"><a href="#avaya板卡arp表地址不更新-记录于20230810" class="headerlink" title="avaya板卡arp表地址不更新-记录于20230810"></a>avaya板卡arp表地址不更新-记录于20230810</h1><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><p>因为dhcp冲突导致avaya板卡无法使用，释放出来ip后，ip还是无法ping通</p><h2 id="排查方法-4"><a href="#排查方法-4" class="headerlink" title="排查方法"></a>排查方法</h2><p>查看核心交换机arp表，发现arp表还未更新，此时距离释放ip已经过去30分钟，只能手动清理arp表进行更新</p><h1 id="无线网络缓慢-记录于20230809"><a href="#无线网络缓慢-记录于20230809" class="headerlink" title="无线网络缓慢-记录于20230809"></a>无线网络缓慢-记录于20230809</h1><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><p>昨天有用户反映无线网络缓慢，下载文件几十kb&#x2F;s,微信接收图片，发送文字转圈</p><h2 id="排查方法-5"><a href="#排查方法-5" class="headerlink" title="排查方法"></a>排查方法</h2><p>1.远程到用户侧电脑，分别ping公网、内网网关，发现都出现丢包现象，所以肯定内网出现了问题<br>2.通过ac查看用户所连接ap的负载，信号强度，发现都是正常状态，只是连接速率偏低，但不该慢到这种程度和丢包，所以可以排除ap的问题<br>3.本来想查看ac测是否有大流量导致，直接show了接口信息，发现大量crc报错，基本问题已经定位到，换掉此端口网线后问题解决</p><img src="/2053/12/31/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9B%B4/crc.png" class=""><h2 id="问题规避"><a href="#问题规避" class="headerlink" title="问题规避"></a>问题规避</h2><p>crc基本一出现就会影响网络正常运行，而解决方法比较简单，就是换网线，可以适当监控是否有端口存在crc</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用selenium控制光猫黑名单</title>
    <link href="/2023/06/26/%E4%BD%BF%E7%94%A8selenium%E6%8E%A7%E5%88%B6%E5%85%89%E7%8C%AB%E9%BB%91%E5%90%8D%E5%8D%95/"/>
    <url>/2023/06/26/%E4%BD%BF%E7%94%A8selenium%E6%8E%A7%E5%88%B6%E5%85%89%E7%8C%AB%E9%BB%91%E5%90%8D%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>使用selenium无头模式对光猫中的mac地址黑名单进行控制</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1.登陆光猫<br>2.点击对应页面<br>3.填写mac地址</p><h1 id="恢复步骤"><a href="#恢复步骤" class="headerlink" title="恢复步骤"></a>恢复步骤</h1><p>1.登陆光猫<br>2.点击对应页面<br>3.删除黑名单</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br>con = sys.argv[<span class="hljs-number">1</span>]<br><br><br>chrome_options = webdriver.ChromeOptions()<br>chrome_options.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>chrome_options.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)<br>chrome_options.add_argument(<span class="hljs-string">&#x27;--no-sandbox&#x27;</span>) <span class="hljs-comment"># 这个配置很重要</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deny</span>():<br>    driver = webdriver.Chrome(chrome_options=chrome_options,executable_path=<span class="hljs-string">&#x27;/home/chromedriver&#x27;</span>)<br>    driver.get(<span class="hljs-string">&#x27;http://192.168.1.1/&#x27;</span>) <span class="hljs-comment">#按实际填写ip</span><br><br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;Frm_Password&#x27;</span>).send_keys(<span class="hljs-string">&#x27;xxxxx&#x27;</span>,Keys.ENTER) <span class="hljs-comment">#按实际输入密码</span><br><br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;menu3&#x27;</span>).click()<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    driver.switch_to.frame(<span class="hljs-string">&#x27;mainFrame&#x27;</span>)<br>    <span class="hljs-comment">#按实际填写mac</span><br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;smMACFilter&#x27;</span>).click()<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac1&#x27;</span>).send_keys(<span class="hljs-string">&#x27;91&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac2&#x27;</span>).send_keys(<span class="hljs-string">&#x27;62&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac3&#x27;</span>).send_keys(<span class="hljs-string">&#x27;a1&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac4&#x27;</span>).send_keys(<span class="hljs-string">&#x27;13&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac5&#x27;</span>).send_keys(<span class="hljs-string">&#x27;91&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;mac6&#x27;</span>).send_keys(<span class="hljs-string">&#x27;f4&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;Btn_Add&#x27;</span>).click()<br>    time.sleep(<span class="hljs-number">3</span>)<br>    driver.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">permit</span>():<br>    driver = webdriver.Chrome(chrome_options=chrome_options,executable_path=<span class="hljs-string">&#x27;/home/chromedriver&#x27;</span>)<br>    driver.get(<span class="hljs-string">&#x27;http://192.168.1.1/&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;Frm_Password&#x27;</span>).send_keys(<span class="hljs-string">&#x27;xxxxxx&#x27;</span>,Keys.ENTER)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;menu3&#x27;</span>).click()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    driver.switch_to.frame(<span class="hljs-string">&#x27;mainFrame&#x27;</span>)<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;smMACFilter&#x27;</span>).click()<br>    driver.find_element(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;Img_Delete0&#x27;</span>).click()<br>    time.sleep(<span class="hljs-number">3</span>)<br>    driver.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">con</span>):<br>    <span class="hljs-keyword">if</span> con == <span class="hljs-string">&#x27;permit&#x27;</span>:<br>        permit()<br>    <span class="hljs-keyword">if</span> con == <span class="hljs-string">&#x27;deny&#x27;</span>:<br>        deny()<br>main(con)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网设备建立ipsec vpn</title>
    <link href="/2023/06/26/%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E5%BB%BA%E7%AB%8Bipsec-vpn/"/>
    <url>/2023/06/26/%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E5%BB%BA%E7%AB%8Bipsec-vpn/</url>
    
    <content type="html"><![CDATA[<p>前几天接到了一个需求，在路由器的内部增加一台juniper srx的防火墙，然后与其他地方的墙建立ipsec vpn</p><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><p>路由器lan1—juniper srx防火墙wan<br>路由器lan2—juniper srx防火墙lan<br>路由器两个lan分不同网段，lan2为内网<br>在出口路由器上面映射500和4500端口 udp协议</p><h1 id="ipsec-建立"><a href="#ipsec-建立" class="headerlink" title="ipsec 建立"></a>ipsec 建立</h1><p>按照正常的ipsec配置即可</p><h1 id="内网互通"><a href="#内网互通" class="headerlink" title="内网互通"></a>内网互通</h1><p>在路由器将对方子网的静态路由指向juniper srx的lan口ip</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>使用正常</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>防火墙</tag>
      
      <tag>Juniper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230626-伤痛中恢复跑步</title>
    <link href="/2023/06/26/20230626-%E4%BC%A4%E7%97%9B%E4%B8%AD%E6%81%A2%E5%A4%8D%E8%B7%91%E6%AD%A5/"/>
    <url>/2023/06/26/20230626-%E4%BC%A4%E7%97%9B%E4%B8%AD%E6%81%A2%E5%A4%8D%E8%B7%91%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="伤痛"><a href="#伤痛" class="headerlink" title="伤痛"></a>伤痛</h1><p>持续跑步一年了，并没有特意的坚持，已经养成了某种习惯，两周前因为膝盖疼痛没有恢复，所以去医院看了医生，因为查体并没有严重症状，所以判断脂肪垫炎，医生建议休息，然后逐步恢复，缓慢增加。</p><h1 id="休息"><a href="#休息" class="headerlink" title="休息"></a>休息</h1><p>休息了大概2周，没有跑步，也从各方面得知受伤是因为肌肉力量不强，所以导致膝盖压力过大，所以这两周一直以训练力量为主，骑了2次自行车（40k+36k），负重（10kg）深蹲，靠墙静蹲，核心训练，放松小腿和大腿肌肉（每天），然后感觉到已经很轻微了，不特意找角度已经不觉得有什么问题，应该休息的差不多了。<br>泡沫轴：大腿股四头肌放松，小腿后侧，小腿前侧</p><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>从前天开始尝试2km，然后3km，今天加到了4km，感觉非常良好，并没有因为增加到4k而更加严重，之后慢慢增加跑量，把力量训练提上日程，努力夏训。又能跑步了，真的很开心。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跑步</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023五一-小物钓</title>
    <link href="/2023/05/07/2023%E4%BA%94%E4%B8%80-%E5%B0%8F%E7%89%A9%E9%92%93/"/>
    <url>/2023/05/07/2023%E4%BA%94%E4%B8%80-%E5%B0%8F%E7%89%A9%E9%92%93/</url>
    
    <content type="html"><![CDATA[<p>五一期间去了黑桥公园，玩了小物钓。</p><h2 id="黑桥公园"><a href="#黑桥公园" class="headerlink" title="黑桥公园"></a>黑桥公园</h2><p>黑桥公园人少，地方大，能露营，有水有小孩子的玩乐场地，水边n多蝌蚪，滑梯巨大，有一个跑步道环绕着水域，跑步不错，打卡了个15km。带娃去可以推露营车进去，轻省。</p><h2 id="小物钓"><a href="#小物钓" class="headerlink" title="小物钓"></a>小物钓</h2><p>从路亚转小物就是一个字“爽”，路亚这么多次也没有小物这两天钓的鱼多，鱼情还不是特别好的一个地方，不过鱼多了也就那么回事儿了，钓回来的鳑鲏（公）和麦穗养了几条在家里，有一条大的发色鳑鲏第二天就跳缸了，然后加了个盖子，新买的防跳网还在路上，考虑是不是换大缸多养几条。</p><h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><p>吉小物1.6m<br>0.6主线，0.3子线，新半月钩（吉小物成套）<br>吉小物送的鱼食</p><h3 id="鱼种"><a href="#鱼种" class="headerlink" title="鱼种"></a>鱼种</h3><p>鳑鲏：公发色，母有输卵管<br>麦穗：公的发情期嘴上有七星刺<br>鲫鱼：不会看</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>钓鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跑步10个月的数据对比和自我感受</title>
    <link href="/2023/04/28/%E8%B7%91%E6%AD%A510%E4%B8%AA%E6%9C%88%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94%E5%92%8C%E8%87%AA%E6%88%91%E6%84%9F%E5%8F%97/"/>
    <url>/2023/04/28/%E8%B7%91%E6%AD%A510%E4%B8%AA%E6%9C%88%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94%E5%92%8C%E8%87%AA%E6%88%91%E6%84%9F%E5%8F%97/</url>
    
    <content type="html"><![CDATA[<p>从2022年6月28日到2023年4月28日，总共累计跑步10个月，期间包括封控停跑2周，新冠停跑2周，甲流停跑2周，下面是从配速和实际感受的一些记录：</p><h3 id="配速"><a href="#配速" class="headerlink" title="配速"></a>配速</h3><p>刚开始跑步的时候配速慢到了10分配速，然后9分配速稳定了一段时间，慢慢的到8分配，7分配（2022年10月底），这个过程大概用了4个月，然后就是一系列的封控，生病，这期间配速一直没怎么变化，跑步方法依然是以有氧为主，控制心率在147左右，一直到2023年4月份，配速来到了6分配（6：40左右），一共经历了10个月。</p><h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><p>距离从一开始的3km开跑，慢慢增加到5km、8km、用了一个月的时间，然后跑了第一个10km，跑了89min，最后真跑不动了，然后基本是跑2休1，月跑量100出头，多点的时候能跑到160，最远的距离16km，配速630，作为初跑者我已经很知足了，马拉松毕竟是极限运动，要有敬畏之心，循序渐进。</p><h3 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h3><p>2022年—</p><img src="/2023/04/28/%E8%B7%91%E6%AD%A510%E4%B8%AA%E6%9C%88%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94%E5%92%8C%E8%87%AA%E6%88%91%E6%84%9F%E5%8F%97/run1.png" class=""><p>2023年—</p><img src="/2023/04/28/%E8%B7%91%E6%AD%A510%E4%B8%AA%E6%9C%88%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94%E5%92%8C%E8%87%AA%E6%88%91%E6%84%9F%E5%8F%97/run2.png" class=""><h3 id="身体感受"><a href="#身体感受" class="headerlink" title="身体感受"></a>身体感受</h3><p>刚开始跑8、9分配甚至7分配的时候感觉体感是很舒适的，但是到了6分配，不知道是心率原因还是身体的力量原因，感觉没有那么的舒适，心率甚至比之前更低了，可能是肌肉需要更好的适应，也可能是因为最近涨了几斤肉，又或者是从夜跑调整到了晨跑，种种原因吧，综上我觉得可能是因为晨跑的原因，身体并没有打的很开，因为一开始晨跑的时候同样的配速，心率会高10左右，具体原因未知。最近也没有夜跑了，所以暂无法对比。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>像打怪升级一样的感受，心肺、肌肉交替成长，还是很好玩的一个过程，总之循序渐进，向黑影儿所说，激进不冒进，坚持跑下去才是长久的胜利。<br>5.1期间准备跑第一个半马，加油！！！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跑步</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu squid端口不监听ipv4</title>
    <link href="/2023/03/17/ubuntu-squid%E7%AB%AF%E5%8F%A3%E4%B8%8D%E7%9B%91%E5%90%ACipv4/"/>
    <url>/2023/03/17/ubuntu-squid%E7%AB%AF%E5%8F%A3%E4%B8%8D%E7%9B%91%E5%90%ACipv4/</url>
    
    <content type="html"><![CDATA[<h1 id="Squid端口不监听ipv4"><a href="#Squid端口不监听ipv4" class="headerlink" title="Squid端口不监听ipv4"></a>Squid端口不监听ipv4</h1><p>昨天装了squid代理，安装完成后没法用，发现端口不通，netstat后发现只监听了ipv6的端口，没有监听ipv4的地址，网上找了一下资料，看到一篇改一下配置文件到0.0.0.0:3128</p><img src="/2023/03/17/ubuntu-squid%E7%AB%AF%E5%8F%A3%E4%B8%8D%E7%9B%91%E5%90%ACipv4/conf.png" class=""><p>再查看netstat后，ipv4也监听了，端口也通了</p><img src="/2023/03/17/ubuntu-squid%E7%AB%AF%E5%8F%A3%E4%B8%8D%E7%9B%91%E5%90%ACipv4/netstat.png" class="">]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>系统</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>squid</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wireguard-vpn with docker</title>
    <link href="/2023/03/17/wireguard-vpn-with-docker/"/>
    <url>/2023/03/17/wireguard-vpn-with-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="wiregaurd-vpn服务端安装"><a href="#wiregaurd-vpn服务端安装" class="headerlink" title="wiregaurd-vpn服务端安装"></a>wiregaurd-vpn服务端安装</h1><p>使用docker-compose安装</p><h2 id="创建一个wireguard的目录"><a href="#创建一个wireguard的目录" class="headerlink" title="创建一个wireguard的目录"></a>创建一个wireguard的目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo mkdir /opt/wireguard-server<br></code></pre></td></tr></table></figure><img src="/2023/03/17/wireguard-vpn-with-docker/mkdir.png" class=""><h2 id="docker-compose文件配置"><a href="#docker-compose文件配置" class="headerlink" title="docker-compose文件配置"></a>docker-compose文件配置</h2><p>网段,端口可以自行变更,peers是生产几个客户端配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">version: <span class="hljs-string">&#x27;3.7&#x27;</span><br>services:<br>  wireguard:<br>    image: linuxserver/wireguard<br>    container_name: wireguard<br>    cap_add:<br>      - NET_ADMIN<br>      - SYS_MODULE<br>    environment:<br>      - PUID=<span class="hljs-number">1000</span><br>      - PGID=<span class="hljs-number">1000</span><br>      - TZ=Africa/Nairobi <span class="hljs-comment">#set correct timezone</span><br>      - SERVERPORT=<span class="hljs-number">51820</span> <span class="hljs-comment">#optional</span><br>      - PEERS=<span class="hljs-number">5</span> <span class="hljs-comment">#optional</span><br>      - PEERDNS=auto <span class="hljs-comment">#optional</span><br>      - ALLOWEDIPS=<span class="hljs-number">10.255</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>,<span class="hljs-number">10.13</span><span class="hljs-number">.11</span><span class="hljs-number">.0</span> <span class="hljs-comment">#Peer addresses allowed</span><br>      - INTERNAL_SUBNET=<span class="hljs-number">10.13</span><span class="hljs-number">.11</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> <span class="hljs-comment">#Subnet used in VPN tunnel</span><br>      - SERVERURL=xxxx.synology.me <span class="hljs-comment">#Wireguard VPN server address</span><br>    volumes:<br>      - /opt/wireguard-server/config:/config<br>      - /usr/src:/usr/src <span class="hljs-comment"># location of kernel headers</span><br>      - /lib/modules:/lib/modules<br>    ports:<br>      - <span class="hljs-number">51820</span>:<span class="hljs-number">51820</span>/udp<br>    sysctls:<br>      - net.ipv4.conf.<span class="hljs-built_in">all</span>.src_valid_mark=<span class="hljs-number">1</span><br>    restart: always<br></code></pre></td></tr></table></figure><h1 id="client端配置"><a href="#client端配置" class="headerlink" title="client端配置"></a>client端配置</h1><h2 id="安装wireguard"><a href="#安装wireguard" class="headerlink" title="安装wireguard"></a>安装wireguard</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install wireguard<br></code></pre></td></tr></table></figure><p> 然后将配置文件copy到&#x2F;etc&#x2F;wireguard目录下,例如peer1.conf,我这里已经更名为wg0.conf<br> <img src="/2023/03/17/wireguard-vpn-with-docker/conf.png" class=""></p><h2 id="启动wiregaurd"><a href="#启动wiregaurd" class="headerlink" title="启动wiregaurd"></a>启动wiregaurd</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo wg-quick up wg0<br></code></pre></td></tr></table></figure> <img src="/2023/03/17/wireguard-vpn-with-docker/conf.png" class=""><p>就能看见wg0端口起来了，为了方便可以更名为wg0，看起来比较方便,关闭就是sudo wg-quick down wg0</p><h1 id="自动重连"><a href="#自动重连" class="headerlink" title="自动重连"></a>自动重连</h1><p>如果外网地址会变，或者因为某种原因会断开，需要自动重连可以使用python的一个模块wireguard-reconnect</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo pip3 install wireguard-reconnect<br><span class="hljs-comment">#检测ip和检测间隔</span><br>sudo nohup wireguard-reconnect -i wg0 -g <span class="hljs-number">10.255</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> -p <span class="hljs-number">60</span> &amp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>vpn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vpn</tag>
      
      <tag>wireguard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ipsec vpn ikev1排错-地址集</title>
    <link href="/2022/12/30/ipsec-vpn-ikev1%E6%8E%92%E9%94%99-%E5%9C%B0%E5%9D%80%E9%9B%86/"/>
    <url>/2022/12/30/ipsec-vpn-ikev1%E6%8E%92%E9%94%99-%E5%9C%B0%E5%9D%80%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="ipsec-vpn因为地址集问题无法建立连接"><a href="#ipsec-vpn因为地址集问题无法建立连接" class="headerlink" title="ipsec vpn因为地址集问题无法建立连接"></a>ipsec vpn因为地址集问题无法建立连接</h1><h3 id="juniper-srx与华为云建立ipsec-ikev1基础版"><a href="#juniper-srx与华为云建立ipsec-ikev1基础版" class="headerlink" title="juniper srx与华为云建立ipsec ikev1基础版"></a>juniper srx与华为云建立ipsec ikev1基础版</h3><p>当时建完了是很稳定的，跑了大约几个月的时间，后来因为一次变更变得不稳定了。</p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>因为采用的是ikev1，但是不是所有的设备都支持ikev1地址集这个概念，后来变更因为加了一个网段，所以导致了不稳定，经过和华为云排查了1天的时间，定位到这个问题并解决，如果有此困扰可以试试把地址集分开，单独建策略。<br>第一张图是正确的策略方式</p><p>这是正确的</p><img src="/2022/12/30/ipsec-vpn-ikev1%E6%8E%92%E9%94%99-%E5%9C%B0%E5%9D%80%E9%9B%86/zhengque.png" class=""><p>不正确的</p><img src="/2022/12/30/ipsec-vpn-ikev1%E6%8E%92%E9%94%99-%E5%9C%B0%E5%9D%80%E9%9B%86/buzhengque.png" class=""><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>应该不是所以的设备都不支持地址集，只是赶上了，给大家一个排错思路。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ipsecvpn</tag>
      
      <tag>juniper</tag>
      
      <tag>交换机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>telnetlib备份思科交换机10054</title>
    <link href="/2022/11/29/telnetlib%E5%A4%87%E4%BB%BD%E6%80%9D%E7%A7%91%E4%BA%A4%E6%8D%A2%E6%9C%BA10054/"/>
    <url>/2022/11/29/telnetlib%E5%A4%87%E4%BB%BD%E6%80%9D%E7%A7%91%E4%BA%A4%E6%8D%A2%E6%9C%BA10054/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>想用python的telnetlib模块对所有交换机做个自动备份，但是有几台3850交换机汇报如下错误:</p><img src="/2022/11/29/telnetlib%E5%A4%87%E4%BB%BD%E6%80%9D%E7%A7%91%E4%BA%A4%E6%8D%A2%E6%9C%BA10054/10054.jpg" class=""><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">buf = self.sock.recv(50)<br>ConnectionResetError: [WinError 10054] 远程主机强迫关闭了一个现有的连接。<br></code></pre></td></tr></table></figure><p>调试了一下午终于在一篇文章中找到了临时解决办法，但是具体原因未知，我分析可能是因为交换机的特定版本对退出后的处理问题，因为有10台左右3850，有6台不行，都不是一个版本。<br>这个链接中找到的答案<a href="http://ruwanindikaprasanna.blogspot.com/2018/02/winerror-10054-existing-connection-was.html">http://ruwanindikaprasanna.blogspot.com/2018/02/winerror-10054-existing-connection-was.html</a></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>就是不使用telnetlib的read_all()，改为read_until()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tn.write(<span class="hljs-string">b&quot;testtest1234\r\n&quot;</span>)<br>config = tn.read_until(<span class="hljs-string">b&quot;testtest1234&quot;</span>).decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>tn.close()<br></code></pre></td></tr></table></figure><img src="/2022/11/29/telnetlib%E5%A4%87%E4%BB%BD%E6%80%9D%E7%A7%91%E4%BA%A4%E6%8D%A2%E6%9C%BA10054/10054%E8%A7%A3%E5%86%B3.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>h3c</tag>
      
      <tag>cisco</tag>
      
      <tag>backup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思科4500启动失败 rommon</title>
    <link href="/2022/11/20/%E6%80%9D%E7%A7%914500%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-rommon/"/>
    <url>/2022/11/20/%E6%80%9D%E7%A7%914500%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5-rommon/</url>
    
    <content type="html"><![CDATA[<h1 id="思科4500启动失败"><a href="#思科4500启动失败" class="headerlink" title="思科4500启动失败"></a>思科4500启动失败</h1><p>最近因为停电，usp故障有一台cisco4507启动失败，直接启动到了如下模式：<br>rommon&gt;</p><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><p>看到是没有正确的看到加载镜像，所以想是不是镜像掉了，上官网搜了一些kb<br>rommon&gt;dev (查看启动项，我发现没有bootflash)</p><p>rommon&gt;dir flash0:<br>也看不到任何东西，我在想是不是设备挂了，所以抱着死马当活马医的态度对设备进行重新引导，修改寄存器值</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>检查设置\清除设置\修改寄存器值\重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash"><span class="hljs-built_in">set</span></span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash"><span class="hljs-built_in">unset</span> boot</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash">confreg 0x2102</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash">reset</span><br></code></pre></td></tr></table></figure><p>如果不行可以尝试下面步骤，我是做了上述步骤就好了<br>配置TFTP</p><p>1.配置接口ip和默认路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash"><span class="hljs-built_in">set</span> interface fa1 x.x.x.x 255.255.255.0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash"><span class="hljs-built_in">set</span> ip route default x.x.x.x</span>  <br></code></pre></td></tr></table></figure><p>2.查看是否ping通tftp server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash"><span class="hljs-built_in">set</span></span><br><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash">ping x.x.x.x</span><br></code></pre></td></tr></table></figure><p>3.从tftp server引导</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">rommon&gt;</span><span class="language-bash">boot tftp://x.x.x.x/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交换机</tag>
      
      <tag>CISCO</tag>
      
      <tag>思科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows-nps多策略配置用法</title>
    <link href="/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/"/>
    <url>/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="环境-amp-需求"><a href="#环境-amp-需求" class="headerlink" title="环境&amp;需求"></a>环境&amp;需求</h1><p>现有环境是多台无线控制器共用一台radius服务器，现在有一台无线控制器发出2个ssid，1个ssid所有员工使用，另1个ssid只有某一个ad的用户组使用</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先建一个所有无线控制器和所有用户均能授权访问的策略，如下图：</p><img src="/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/3.jpg" class=""><p>再建一个特殊需求的ssid策略，另外需要把无线控制器单独建一个dot1x策略，并将nas-ip更换成一个另外的ip，这样让nps做条件判断，但是这样做完，还需要做一个deny策略，用于拦截其他用户，如下图：</p><img src="/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/1.jpg" class=""><img src="/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/2.jpg" class=""><p>这样做完即可对不通ssid进行不同用户组认证</p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>因为这个坑点还开了个case，就是需要域账号拨入属性根据nps判断（我一直测试的账号是允许拨入属性，折腾了2天）</p><img src="/2022/09/28/windows-nps%E5%A4%9A%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95/4.jpg" class="">]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
      <category>无线</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Nps</tag>
      
      <tag>wifi认证</tag>
      
      <tag>无线认证</tag>
      
      <tag>802.1x</tag>
      
      <tag>认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python执行shell</title>
    <link href="/2022/09/26/python%E6%89%A7%E8%A1%8Cshell/"/>
    <url>/2022/09/26/python%E6%89%A7%E8%A1%8Cshell/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近一个脚本遇到了一个问题，就是python里面使用os.system无法顺利执行，再排查过程中顺利解决了这个问题</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><h3 id="无法使用变量？"><a href="#无法使用变量？" class="headerlink" title="无法使用变量？"></a>无法使用变量？</h3><p>一开始的脚本是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.system(<span class="hljs-string">f&quot;gupload -u ********@qq.com -p password -a &#x27;Running&#x27; /home/ubuntu/github/strava-backup/stravabackup/output/activities/2022/*<span class="hljs-subst">&#123;lastrun&#125;</span>*.fit&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后没有执行成功，再想是不是因为{lastrun}没有生效呢，然后改成了这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">command = <span class="hljs-string">f&quot;gupload -u ********@qq.com -p password -a &#x27;Running&#x27; /home/ubuntu/github/strava-backup/stravabackup/output/activities/2022/*<span class="hljs-subst">&#123;lastrun&#125;</span>*.fit&quot;</span><br>os.system(command)<br></code></pre></td></tr></table></figure><p>改成这样发现还是不行,咋办呢？</p><h3 id="打印错误"><a href="#打印错误" class="headerlink" title="打印错误"></a>打印错误</h3><p>然后开始想把错误打印出来，可是用 &gt; log 的方式发现并不行，网上搜到了os.system会有result，那么就把result输出出来看看吧（result&#x3D;0执行成功），借助wxpusher把result输出到微信,所以脚本又改成了这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">command = <span class="hljs-string">f&quot;gupload -u ********@qq.com -p password -a &#x27;Running&#x27; /home/ubuntu/github/strava-backup/stravabackup/output/activities/2022/*<span class="hljs-subst">&#123;lastrun&#125;</span>*.fit&quot;</span><br>result = os.system(command)<br><span class="hljs-keyword">if</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-number">0</span>:<br>    wxpusher(result)<br></code></pre></td></tr></table></figure><p>得到的输出结果是32512，网上查到是因为执行的命令需要写全目录，就改成了这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">command = <span class="hljs-string">f&quot;/home/ubuntu/.local/bin/gupload -u ********@qq.com -p password -a &#x27;Running&#x27; /home/ubuntu/github/strava-backup/stravabackup/output/activiti</span><br><span class="hljs-string">es/2022/*<span class="hljs-subst">&#123;lastrun&#125;</span>*.fit&quot;</span><br>result = os.system(command)<br><span class="hljs-keyword">if</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-number">0</span>:<br>    wxpusher(result)<br></code></pre></td></tr></table></figure><p>问题解决</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows_Dhcp故障转移集群</title>
    <link href="/2022/09/05/Windows-Dhcp%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/09/05/Windows-Dhcp%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>之前一直用windoes做dhcp服务器，但是刚开始做的时候故障转移一直没做好，后来开了case，弄明白了这个故障转移的设定</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>往往设置完故障转移之后，认为已经完事儿了，但是还需要设置一些其他参数才能是故障转移完美的运行起来，这里面有一些必要参数的设定</p><h1 id="状态切换间隔"><a href="#状态切换间隔" class="headerlink" title="状态切换间隔"></a>状态切换间隔</h1><p>在dhcp failover环境中，我们首先需要了解状态切换间隔这个机制的说明。参考<a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn338979(v=ws.11)">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn338979(v=ws.11)</a></p><p>状态切换间隔定义了服务器处于与伙伴失去联系（lost contact with the partner）到伙伴关闭状态（partner down state）的时间间隔。</p><p>因为dhcp server在与伙伴失去联系（lost contact with the partner）和伙伴关闭状态（partner down state）的工作机制是不一样的，所以该选项的作用可以提供一个状态转换的时间间隔。</p><p>默认处于关闭状态，时间是1个小时。注意：默认是关闭状态，需要打开！！！</p><img src="/2022/09/05/Windows-Dhcp%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E9%9B%86%E7%BE%A4/dhcp%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB1.jpg" class=""><h1 id="MCLT（最长客户端提前期）"><a href="#MCLT（最长客户端提前期）" class="headerlink" title="MCLT（最长客户端提前期）"></a>MCLT（最长客户端提前期）</h1><p>Maximum client lead time (MCLT)定义了dhcp failover partner服务器可以接管整个dhcp租约信息，并且可以开始为dhcp客户端分配整个地址池的时间。MCLT是一个临时的地址租约时间，在MCLT时间周期内，failover partner服务器只能在自己预留的scope里面（standny模式是5%，load balance是50%）给dhcp客户端分配ip地址，等MCLT这个时间超时以后，可以接管整个作用域来给客户端分配ip地址。</p><p>MCLT的作用可以实现在对应时间周期内，通过自己的作用域来给dhcp客户端分配ip，防止在该时间范围内，出现故障的dhcp服务器回复正常后，同步数据库时还需要额外处理地址冲突的情况，dhcp server处于处理地址冲突状态时，是不响应dhcp客户端的请求的。</p><p>简单来说，可以看上面图中，我设置的是5分钟，也就是当与伙伴失去联系后，我再5分钟内只能分配自己的地址池，5分钟后才能接管全部地址池，另外还有一个作用是客户端第一次获取到dhcp的租约。</p><p>另外，MCLT也定义了一个dhcp failover server在接管整个ip地址池之前，等待进入partner down state的时间。MCLT不能设置为0，默认设置为1个小时。</p><p>也就是加一起需要10分钟才能完成全部地址池的故障转移</p><h1 id="“与伙伴失去联系”状态"><a href="#“与伙伴失去联系”状态" class="headerlink" title="“与伙伴失去联系”状态"></a>“与伙伴失去联系”状态</h1><p>dhcp服务器状态显示为“与伙伴失去联系”时的ip地址分配机制与上面MCLT关联，如果伙伴失去联系状态，5分钟内只能分配自己的地址池，5分钟后才能使用全部地址</p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Dhcp</tag>
      
      <tag>HA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ps5_Irc服务</title>
    <link href="/2022/09/03/Ps5-Irc%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/09/03/Ps5-Irc%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>PS5用户直播只能用采集卡或者直接推送到twich或者youtube，无意中看到B站有同学用PS5直接推送到B站，但是需要一些技术门槛，按照那个同学的思路整理了自己直播到B站的方式</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>PS5推流到nginx-rtmp，再从nginx-rtmp推流到B站，但是这样的话弹幕看到，所以搞了个IRF转发的代码段。</p><p>PS5跟twitch服务器发送相互数据如下:<br>1.PS5发送PASS<br>2.irc回复特定内容<br>3.PS5发送JOIN<br>4.irc回复特定内容（据实际观察，3、4步重复两次）<br>前四步已经建立了信任连接，之后就是irc单向往PS5发送消息<br>那么我们自己建一个irc服务器，跟PS5交互就行</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>使用抽取B站直播间弹幕的用的是<a href="https://github.com/xfgryujk/blivedm%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E6%88%91%E7%9A%84github%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6">https://github.com/xfgryujk/blivedm，也可以看我的github，里面有以下代码文件</a></p><h3 id="1-simple-py中直播间号码改成自己的"><a href="#1-simple-py中直播间号码改成自己的" class="headerlink" title="1.simple.py中直播间号码改成自己的"></a>1.simple.py中直播间号码改成自己的</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">TEST_ROOM_IDS = [<br>    <span class="hljs-number">22509403</span>,<br>]<br></code></pre></td></tr></table></figure><h3 id="2-simple-py中添加像irf发送弹幕代码"><a href="#2-simple-py中添加像irf发送弹幕代码" class="headerlink" title="2.simple.py中添加像irf发送弹幕代码"></a>2.simple.py中添加像irf发送弹幕代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">bmsg</span>):<br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><span class="hljs-comment"># 建立连接:</span><br>    s.connect((<span class="hljs-string">&#x27;10.255.1.101&#x27;</span>, <span class="hljs-number">6667</span>))<br>    s.send(bmsg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    s.close()<br></code></pre></td></tr></table></figure><h3 id="3-simple-py中async-def-on-danmuku下面添加代码"><a href="#3-simple-py中async-def-on-danmuku下面添加代码" class="headerlink" title="3.simple.py中async def _on_danmuku下面添加代码"></a>3.simple.py中async def _on_danmuku下面添加代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">send(<span class="hljs-string">&quot;:&quot;</span> + message.uname +<span class="hljs-string">&quot;!&quot;</span> + message.uname + <span class="hljs-string">&quot;@&quot;</span> + message.uname + <span class="hljs-string">&quot;.tmi.twitch.tv PRIVMSG  &quot;</span> + <span class="hljs-string">&quot;#willwillwang :&quot;</span>+ message.msg + <span class="hljs-string">&quot;\r\n&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-Irc服务器程序"><a href="#4-Irc服务器程序" class="headerlink" title="4.Irc服务器程序"></a>4.Irc服务器程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> threading<br><br>clients = <span class="hljs-built_in">set</span>()<br>clients_lock = threading.Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listener</span>(<span class="hljs-params">client, address</span>):<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Accepted connection from: &quot;</span>, address)<br>    <span class="hljs-keyword">with</span> clients_lock:<br>        clients.add(client)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = client.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-built_in">repr</span>(data))<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;PASS&#x27;</span> <span class="hljs-keyword">in</span> data:<br>                    msg = <span class="hljs-string">&quot;&quot;&quot;:tmi.twitch.tv 001 willwillwang :Welcome, GLHF!</span><br><span class="hljs-string">:tmi.twitch.tv 001 willwillwang :Welcome, GLHF!</span><br><span class="hljs-string">:tmi.twitch.tv 002 willwillwang :Your host is tmi.twitch.tv</span><br><span class="hljs-string">:tmi.twitch.tv 003 willwillwang :This server is rather new</span><br><span class="hljs-string">:tmi.twitch.tv 004 willwillwang :-</span><br><span class="hljs-string">:tmi.twitch.tv 375 willwillwang :-</span><br><span class="hljs-string">:tmi.twitch.tv 372 willwillwang :You are in a maze of twisty passages, all alike.</span><br><span class="hljs-string">:tmi.twitch.tv 376 willwillwang :&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>             <br>                    data = msg.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;JOIN&#x27;</span> <span class="hljs-keyword">in</span> data:<br>                    msg = <span class="hljs-string">&quot;&quot;&quot;:willwillwang!willwillwang@willwillwang.tmi.twitch.tv JOIN #willwillwang</span><br><span class="hljs-string">:willwillwang.tmi.twitch.tv 353 willwillwang = #willwillwang :willwillwang</span><br><span class="hljs-string">&quot;&quot;&quot;</span> <br>                    data = msg.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>                <span class="hljs-keyword">with</span> clients_lock:<br>                    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> clients:<br>                        c.sendall(data)<br>                        <span class="hljs-built_in">print</span>(data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">with</span> clients_lock:<br>            clients.remove(client)<br>            client.close()<br><br>host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>port = <span class="hljs-number">6667</span><br><br>s = socket.socket()<br>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>s.bind((host,port))<br>s.listen(<span class="hljs-number">3</span>)<br>th = []<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Server is listening for connections...&quot;</span>)<br>    client, address = s.accept()<br>    th.append(Thread(target=listener, args = (client,address)).start())<br><br>s.close()<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>把上面willwillwang的部分更改为自己twitch账号</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PS5</tag>
      
      <tag>B站</tag>
      
      <tag>IRC</tag>
      
      <tag>弹幕推送</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ps5在B站直播</title>
    <link href="/2022/09/03/PS5%E5%9C%A8B%E7%AB%99%E7%9B%B4%E6%92%AD/"/>
    <url>/2022/09/03/PS5%E5%9C%A8B%E7%AB%99%E7%9B%B4%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<p>PS5在B站直播大多数用采集卡（据我所知），想直播又没有采集卡，那么有没有其他方式直播呢，就这这个问题经过2天的研究终于找出了答案。</p><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><p>一台电脑 or 群晖（支持docker）<br>能上twitch（魔法）（至少首次登录）</p><h1 id="物理拓扑"><a href="#物理拓扑" class="headerlink" title="物理拓扑"></a>物理拓扑</h1><img src="/2022/09/03/PS5%E5%9C%A8B%E7%AB%99%E7%9B%B4%E6%92%AD/ps5_bilibili.png" class=""><h1 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h1><p>IP地址：<br>openwrt-10.255.1.103虚机<br>docker-nginx-rtmp-10.255.1.101虚机<br>b站弹幕获取-10.255.1.101虚机<br>ps-irc-server-10.255.1.101虚机</p><h1 id="思路方法"><a href="#思路方法" class="headerlink" title="思路方法"></a>思路方法</h1><p>接下来一个一个说<br>openwrt：魔法用一次，dns服务，ps5用openwrt当dns服务器<br>魔法用于ps5首次登录twitch验证使用<br>dns用于劫持*.contribute.live-video.net域名到docker-nginx-rtmp，irc.twitch.tv和tmi.twitch.tv劫持到ps-irc-server</p><p>docker-nginx-rtmp: 转发ps5发给twitch的流到B站<br>直接docker部署就行，用的bao3&#x2F;playstation这个老哥的项目</p><p>完成上面两部就能正常直播，下面是弹幕获取。</p><p>b站弹幕获取、ps-irc-server：用于将b站直播间的实时弹幕抓回到本地，并通过ps-irc-server转发到PS5<br>b站弹幕获取是个python程序，也是git项目xfgryujk&#x2F;blivedm<br>ps-irc-server也是个python程序，与b站弹幕获取使用，因为折腾弹幕临时写的，可算作demo版吧，不过够用ps-irc-server</p><p>使用到的东西就这么多，只是个大致流程和思路，openwrt和docker估计大部分人会玩群晖的就会部署，重点说下b站弹幕获取和ps-irc-server使用方式</p><p>1.将ps-irc-server中的sample和twitch复制到b站获取程序的目录下并替换<br>2.将twitch.py和sample.py下面的直播间ID换成自己的，willwillwang换成自己的twitch账号</p><p>另外自带twitch自带直播码率为6000kbps，我带宽也推到了6000kbps，但是在b站观看在画面混乱或高速移动时会有掉分辨率的情况，肯定不如电脑+采集卡，但是胜在方便</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PS5</tag>
      
      <tag>直播</tag>
      
      <tag>B站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python备份交换机配置</title>
    <link href="/2022/09/02/Python%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/02/Python%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>作为一个网络工程师，交换机配置备份还是必要的，如果哪天交换机挂了，或者配置端口配置错了，想知道之前的vlan等这些情况都需要查看之前的配置，于是自己用python写了个备份交换机配置的自动化脚本。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>linux服务器定时运行脚本<br>根据日期创建文件夹并获取配置写入文件</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">48 23 * * * python3 /home/python/switchbk.py &gt; /home/python/switchbk-log<br><span class="hljs-meta prompt_">#</span><span class="language-bash">crontabl设置每天23:48运行</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> telnetlib<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br>now = time.strftime(<span class="hljs-string">&quot;%y%m%d&quot;</span>)<br><span class="hljs-comment">#当前日期</span><br>path = <span class="hljs-string">&quot;/home/python/switchconf/%s&quot;</span>%now<br><span class="hljs-comment">##目录自定义</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>    os.makedirs(path)<br><br>Hostall = <span class="hljs-string">&quot;&quot;&quot;172.19.254.10</span><br><span class="hljs-string">172.19.254.11</span><br><span class="hljs-string">10.1.1.1</span><br><span class="hljs-string">10.1.1.2</span><br><span class="hljs-string">10.1.1.3</span><br><span class="hljs-string">10.1.1.4</span><br><span class="hljs-string">10.1.1.5</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Hostlist = Hostall.splitlines()<br><span class="hljs-keyword">for</span> Host <span class="hljs-keyword">in</span> Hostlist:<br>    <span class="hljs-keyword">try</span>:<br>        tn = telnetlib.Telnet(Host, timeout=<span class="hljs-number">15</span>)<br>        time.sleep(<span class="hljs-number">3</span>)<br>        tn.write(<span class="hljs-string">b&#x27;admin\n&#x27;</span>)<br>        time.sleep(<span class="hljs-number">1</span>)<br>        tn.write(<span class="hljs-string">b&#x27;admin\n&#x27;</span>)<br>        time.sleep(<span class="hljs-number">3</span>)<br>        tn.write(<span class="hljs-string">b&#x27;dis cur\n&#x27;</span>)<br>        tn.read_some()<br>        tn.write(<span class="hljs-string">b&#x27;quit\n&#x27;</span>)<br><span class="hljs-comment">#        print(&quot;logout&quot;)</span><br>        mac1 = tn.read_all()<br>        f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;%s/%s&#x27;</span>%(path,Host),<span class="hljs-string">&#x27;wb&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;open file&quot;</span>)<br>        f1.write(mac1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;write file&quot;</span>)<br>        f1.close()<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%s finish&quot;</span>%Host)<br>    <span class="hljs-keyword">except</span>:<br>                                                                                                                                                                                   <span class="hljs-number">80</span>,<span class="hljs-number">5</span>          <span class="hljs-number">93</span>%<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;%s finish&quot;</span>%Host)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fail %s&quot;</span>%Host)<br></code></pre></td></tr></table></figure><img src="/2022/09/02/Python%E5%A4%87%E4%BB%BD%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/20200925150527878.png" class="">]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>h3c</tag>
      
      <tag>cisco</tag>
      
      <tag>backup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Juniper_srx-udp会话不超时</title>
    <link href="/2022/09/02/Juniper-srx-udp%E4%BC%9A%E8%AF%9D%E4%B8%8D%E8%B6%85%E6%97%B6/"/>
    <url>/2022/09/02/Juniper-srx-udp%E4%BC%9A%E8%AF%9D%E4%B8%8D%E8%B6%85%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Juniper-srx-udp会话不超时"><a href="#Juniper-srx-udp会话不超时" class="headerlink" title="Juniper_srx-udp会话不超时"></a>Juniper_srx-udp会话不超时</h1><p>最近遇到了一个奇怪问题，内网有sip服务器，我需要与云上的语音服务商进行sip注册，拨打电话，由于外网是双链路冗余并且做了rpm，但是当一条外网链路中断后，语音注册无法切换到另一条链路，观察到的现象是udp<br>不会超时。</p><img src="/2022/09/02/Juniper-srx-udp%E4%BC%9A%E8%AF%9D%E4%B8%8D%E8%B6%85%E6%97%B6/16422276281.png" class=""><p>timeout不会变</p><p>这个原因应该是udp没有三次握手导致，udp一直往外发，防火墙就认为该会话一直存活，所以不会阻断掉。Juniper表示如果需要能自动切换线路，需要两个isp不在同一个zone，所以简单做了routing-instance，模式为<br>forwarding，做完后又做了切换测试，发现还是无法自动切换，再次咨询Juniper，表示需要使用virtual-router模式，再次更改routing-instance为virtual-router模式后，线路可以正常切换。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>juniper srx</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
